$date
	Fri Oct 10 20:04:49 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module RISC_single_cycle_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module abc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # regWEn $end
$var wire 3 $ load_type [2:0] $end
$var wire 32 % load_result [31:0] $end
$var wire 5 & inst_rsw [4:0] $end
$var wire 5 ' inst_rs2 [4:0] $end
$var wire 5 ( inst_rs1 [4:0] $end
$var wire 32 ) inst [31:0] $end
$var wire 32 * data_2 [31:0] $end
$var wire 32 + data_1 [31:0] $end
$var wire 32 , dataR_DMEM [31:0] $end
$var wire 32 - WBSel_out [31:0] $end
$var wire 2 . WBSel [1:0] $end
$var wire 32 / PC_out [31:0] $end
$var wire 32 0 PC_in [31:0] $end
$var wire 32 1 PC_add4_out [31:0] $end
$var wire 1 2 PCSel $end
$var wire 1 3 MemRW $end
$var wire 32 4 Imm_out [31:0] $end
$var wire 3 5 Imm_Sel [2:0] $end
$var wire 1 6 Bsel $end
$var wire 1 7 BrUn $end
$var wire 1 8 BrLt $end
$var wire 1 9 BrEq $end
$var wire 1 : Asel $end
$var wire 4 ; ALU_sel [3:0] $end
$var wire 32 < ALU_out [31:0] $end
$var wire 32 = ALU_B [31:0] $end
$var wire 32 > ALU_A [31:0] $end
$scope module ALU_instance $end
$var wire 32 ? A [31:0] $end
$var wire 32 @ B [31:0] $end
$var wire 32 A srl_out [31:0] $end
$var wire 32 B sra_out [31:0] $end
$var wire 32 C sltu_out [31:0] $end
$var wire 32 D slt_out [31:0] $end
$var wire 32 E sll_out [31:0] $end
$var wire 32 F add_sub_out [31:0] $end
$var wire 4 G ALU_sel [3:0] $end
$var reg 32 H ALU_out [31:0] $end
$scope module ADD_SUB $end
$var wire 32 I A [31:0] $end
$var wire 32 J B [31:0] $end
$var wire 1 K Sel $end
$var wire 32 L carry [31:0] $end
$var wire 32 M Result [31:0] $end
$var wire 1 N Cout $end
$var wire 32 O B_mod [31:0] $end
$scope begin adder_32[1] $end
$scope module FA $end
$var wire 1 P A $end
$var wire 1 Q B $end
$var wire 1 R Cin $end
$var wire 1 S Cout $end
$var wire 1 T Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[2] $end
$scope module FA $end
$var wire 1 U A $end
$var wire 1 V B $end
$var wire 1 W Cin $end
$var wire 1 X Cout $end
$var wire 1 Y Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[3] $end
$scope module FA $end
$var wire 1 Z A $end
$var wire 1 [ B $end
$var wire 1 \ Cin $end
$var wire 1 ] Cout $end
$var wire 1 ^ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[4] $end
$scope module FA $end
$var wire 1 _ A $end
$var wire 1 ` B $end
$var wire 1 a Cin $end
$var wire 1 b Cout $end
$var wire 1 c Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[5] $end
$scope module FA $end
$var wire 1 d A $end
$var wire 1 e B $end
$var wire 1 f Cin $end
$var wire 1 g Cout $end
$var wire 1 h Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[6] $end
$scope module FA $end
$var wire 1 i A $end
$var wire 1 j B $end
$var wire 1 k Cin $end
$var wire 1 l Cout $end
$var wire 1 m Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[7] $end
$scope module FA $end
$var wire 1 n A $end
$var wire 1 o B $end
$var wire 1 p Cin $end
$var wire 1 q Cout $end
$var wire 1 r Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[8] $end
$scope module FA $end
$var wire 1 s A $end
$var wire 1 t B $end
$var wire 1 u Cin $end
$var wire 1 v Cout $end
$var wire 1 w Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[9] $end
$scope module FA $end
$var wire 1 x A $end
$var wire 1 y B $end
$var wire 1 z Cin $end
$var wire 1 { Cout $end
$var wire 1 | Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[10] $end
$scope module FA $end
$var wire 1 } A $end
$var wire 1 ~ B $end
$var wire 1 !" Cin $end
$var wire 1 "" Cout $end
$var wire 1 #" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[11] $end
$scope module FA $end
$var wire 1 $" A $end
$var wire 1 %" B $end
$var wire 1 &" Cin $end
$var wire 1 '" Cout $end
$var wire 1 (" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[12] $end
$scope module FA $end
$var wire 1 )" A $end
$var wire 1 *" B $end
$var wire 1 +" Cin $end
$var wire 1 ," Cout $end
$var wire 1 -" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[13] $end
$scope module FA $end
$var wire 1 ." A $end
$var wire 1 /" B $end
$var wire 1 0" Cin $end
$var wire 1 1" Cout $end
$var wire 1 2" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[14] $end
$scope module FA $end
$var wire 1 3" A $end
$var wire 1 4" B $end
$var wire 1 5" Cin $end
$var wire 1 6" Cout $end
$var wire 1 7" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[15] $end
$scope module FA $end
$var wire 1 8" A $end
$var wire 1 9" B $end
$var wire 1 :" Cin $end
$var wire 1 ;" Cout $end
$var wire 1 <" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[16] $end
$scope module FA $end
$var wire 1 =" A $end
$var wire 1 >" B $end
$var wire 1 ?" Cin $end
$var wire 1 @" Cout $end
$var wire 1 A" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[17] $end
$scope module FA $end
$var wire 1 B" A $end
$var wire 1 C" B $end
$var wire 1 D" Cin $end
$var wire 1 E" Cout $end
$var wire 1 F" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[18] $end
$scope module FA $end
$var wire 1 G" A $end
$var wire 1 H" B $end
$var wire 1 I" Cin $end
$var wire 1 J" Cout $end
$var wire 1 K" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[19] $end
$scope module FA $end
$var wire 1 L" A $end
$var wire 1 M" B $end
$var wire 1 N" Cin $end
$var wire 1 O" Cout $end
$var wire 1 P" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[20] $end
$scope module FA $end
$var wire 1 Q" A $end
$var wire 1 R" B $end
$var wire 1 S" Cin $end
$var wire 1 T" Cout $end
$var wire 1 U" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[21] $end
$scope module FA $end
$var wire 1 V" A $end
$var wire 1 W" B $end
$var wire 1 X" Cin $end
$var wire 1 Y" Cout $end
$var wire 1 Z" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[22] $end
$scope module FA $end
$var wire 1 [" A $end
$var wire 1 \" B $end
$var wire 1 ]" Cin $end
$var wire 1 ^" Cout $end
$var wire 1 _" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[23] $end
$scope module FA $end
$var wire 1 `" A $end
$var wire 1 a" B $end
$var wire 1 b" Cin $end
$var wire 1 c" Cout $end
$var wire 1 d" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[24] $end
$scope module FA $end
$var wire 1 e" A $end
$var wire 1 f" B $end
$var wire 1 g" Cin $end
$var wire 1 h" Cout $end
$var wire 1 i" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[25] $end
$scope module FA $end
$var wire 1 j" A $end
$var wire 1 k" B $end
$var wire 1 l" Cin $end
$var wire 1 m" Cout $end
$var wire 1 n" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[26] $end
$scope module FA $end
$var wire 1 o" A $end
$var wire 1 p" B $end
$var wire 1 q" Cin $end
$var wire 1 r" Cout $end
$var wire 1 s" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[27] $end
$scope module FA $end
$var wire 1 t" A $end
$var wire 1 u" B $end
$var wire 1 v" Cin $end
$var wire 1 w" Cout $end
$var wire 1 x" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[28] $end
$scope module FA $end
$var wire 1 y" A $end
$var wire 1 z" B $end
$var wire 1 {" Cin $end
$var wire 1 |" Cout $end
$var wire 1 }" Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[29] $end
$scope module FA $end
$var wire 1 ~" A $end
$var wire 1 !# B $end
$var wire 1 "# Cin $end
$var wire 1 ## Cout $end
$var wire 1 $# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[30] $end
$scope module FA $end
$var wire 1 %# A $end
$var wire 1 &# B $end
$var wire 1 '# Cin $end
$var wire 1 (# Cout $end
$var wire 1 )# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[31] $end
$scope module FA $end
$var wire 1 *# A $end
$var wire 1 +# B $end
$var wire 1 ,# Cin $end
$var wire 1 -# Cout $end
$var wire 1 .# Sum $end
$upscope $end
$upscope $end
$scope module FA0 $end
$var wire 1 /# A $end
$var wire 1 0# B $end
$var wire 1 K Cin $end
$var wire 1 1# Cout $end
$var wire 1 2# Sum $end
$upscope $end
$upscope $end
$scope module SLL $end
$var wire 32 3# data_in [31:0] $end
$var wire 5 4# shift_amt [4:0] $end
$var reg 32 5# data_out [31:0] $end
$upscope $end
$scope module SLTU_MODULE $end
$var wire 32 6# A [31:0] $end
$var wire 32 7# B [31:0] $end
$var wire 1 8# Sel $end
$var wire 32 9# diff_out [31:0] $end
$var wire 1 :# carry_out $end
$var reg 32 ;# Result [31:0] $end
$scope module SUB $end
$var wire 32 <# A [31:0] $end
$var wire 32 =# B [31:0] $end
$var wire 32 ># B_mod [31:0] $end
$var wire 1 ?# Sel $end
$var wire 32 @# carry [31:0] $end
$var wire 32 A# Result [31:0] $end
$var wire 1 :# Cout $end
$scope begin adder_32[1] $end
$scope module FA $end
$var wire 1 B# A $end
$var wire 1 C# B $end
$var wire 1 D# Cin $end
$var wire 1 E# Cout $end
$var wire 1 F# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[2] $end
$scope module FA $end
$var wire 1 G# A $end
$var wire 1 H# B $end
$var wire 1 I# Cin $end
$var wire 1 J# Cout $end
$var wire 1 K# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[3] $end
$scope module FA $end
$var wire 1 L# A $end
$var wire 1 M# B $end
$var wire 1 N# Cin $end
$var wire 1 O# Cout $end
$var wire 1 P# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[4] $end
$scope module FA $end
$var wire 1 Q# A $end
$var wire 1 R# B $end
$var wire 1 S# Cin $end
$var wire 1 T# Cout $end
$var wire 1 U# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[5] $end
$scope module FA $end
$var wire 1 V# A $end
$var wire 1 W# B $end
$var wire 1 X# Cin $end
$var wire 1 Y# Cout $end
$var wire 1 Z# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[6] $end
$scope module FA $end
$var wire 1 [# A $end
$var wire 1 \# B $end
$var wire 1 ]# Cin $end
$var wire 1 ^# Cout $end
$var wire 1 _# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[7] $end
$scope module FA $end
$var wire 1 `# A $end
$var wire 1 a# B $end
$var wire 1 b# Cin $end
$var wire 1 c# Cout $end
$var wire 1 d# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[8] $end
$scope module FA $end
$var wire 1 e# A $end
$var wire 1 f# B $end
$var wire 1 g# Cin $end
$var wire 1 h# Cout $end
$var wire 1 i# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[9] $end
$scope module FA $end
$var wire 1 j# A $end
$var wire 1 k# B $end
$var wire 1 l# Cin $end
$var wire 1 m# Cout $end
$var wire 1 n# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[10] $end
$scope module FA $end
$var wire 1 o# A $end
$var wire 1 p# B $end
$var wire 1 q# Cin $end
$var wire 1 r# Cout $end
$var wire 1 s# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[11] $end
$scope module FA $end
$var wire 1 t# A $end
$var wire 1 u# B $end
$var wire 1 v# Cin $end
$var wire 1 w# Cout $end
$var wire 1 x# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[12] $end
$scope module FA $end
$var wire 1 y# A $end
$var wire 1 z# B $end
$var wire 1 {# Cin $end
$var wire 1 |# Cout $end
$var wire 1 }# Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[13] $end
$scope module FA $end
$var wire 1 ~# A $end
$var wire 1 !$ B $end
$var wire 1 "$ Cin $end
$var wire 1 #$ Cout $end
$var wire 1 $$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[14] $end
$scope module FA $end
$var wire 1 %$ A $end
$var wire 1 &$ B $end
$var wire 1 '$ Cin $end
$var wire 1 ($ Cout $end
$var wire 1 )$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[15] $end
$scope module FA $end
$var wire 1 *$ A $end
$var wire 1 +$ B $end
$var wire 1 ,$ Cin $end
$var wire 1 -$ Cout $end
$var wire 1 .$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[16] $end
$scope module FA $end
$var wire 1 /$ A $end
$var wire 1 0$ B $end
$var wire 1 1$ Cin $end
$var wire 1 2$ Cout $end
$var wire 1 3$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[17] $end
$scope module FA $end
$var wire 1 4$ A $end
$var wire 1 5$ B $end
$var wire 1 6$ Cin $end
$var wire 1 7$ Cout $end
$var wire 1 8$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[18] $end
$scope module FA $end
$var wire 1 9$ A $end
$var wire 1 :$ B $end
$var wire 1 ;$ Cin $end
$var wire 1 <$ Cout $end
$var wire 1 =$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[19] $end
$scope module FA $end
$var wire 1 >$ A $end
$var wire 1 ?$ B $end
$var wire 1 @$ Cin $end
$var wire 1 A$ Cout $end
$var wire 1 B$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[20] $end
$scope module FA $end
$var wire 1 C$ A $end
$var wire 1 D$ B $end
$var wire 1 E$ Cin $end
$var wire 1 F$ Cout $end
$var wire 1 G$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[21] $end
$scope module FA $end
$var wire 1 H$ A $end
$var wire 1 I$ B $end
$var wire 1 J$ Cin $end
$var wire 1 K$ Cout $end
$var wire 1 L$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[22] $end
$scope module FA $end
$var wire 1 M$ A $end
$var wire 1 N$ B $end
$var wire 1 O$ Cin $end
$var wire 1 P$ Cout $end
$var wire 1 Q$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[23] $end
$scope module FA $end
$var wire 1 R$ A $end
$var wire 1 S$ B $end
$var wire 1 T$ Cin $end
$var wire 1 U$ Cout $end
$var wire 1 V$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[24] $end
$scope module FA $end
$var wire 1 W$ A $end
$var wire 1 X$ B $end
$var wire 1 Y$ Cin $end
$var wire 1 Z$ Cout $end
$var wire 1 [$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[25] $end
$scope module FA $end
$var wire 1 \$ A $end
$var wire 1 ]$ B $end
$var wire 1 ^$ Cin $end
$var wire 1 _$ Cout $end
$var wire 1 `$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[26] $end
$scope module FA $end
$var wire 1 a$ A $end
$var wire 1 b$ B $end
$var wire 1 c$ Cin $end
$var wire 1 d$ Cout $end
$var wire 1 e$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[27] $end
$scope module FA $end
$var wire 1 f$ A $end
$var wire 1 g$ B $end
$var wire 1 h$ Cin $end
$var wire 1 i$ Cout $end
$var wire 1 j$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[28] $end
$scope module FA $end
$var wire 1 k$ A $end
$var wire 1 l$ B $end
$var wire 1 m$ Cin $end
$var wire 1 n$ Cout $end
$var wire 1 o$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[29] $end
$scope module FA $end
$var wire 1 p$ A $end
$var wire 1 q$ B $end
$var wire 1 r$ Cin $end
$var wire 1 s$ Cout $end
$var wire 1 t$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[30] $end
$scope module FA $end
$var wire 1 u$ A $end
$var wire 1 v$ B $end
$var wire 1 w$ Cin $end
$var wire 1 x$ Cout $end
$var wire 1 y$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[31] $end
$scope module FA $end
$var wire 1 z$ A $end
$var wire 1 {$ B $end
$var wire 1 |$ Cin $end
$var wire 1 }$ Cout $end
$var wire 1 ~$ Sum $end
$upscope $end
$upscope $end
$scope module FA0 $end
$var wire 1 !% A $end
$var wire 1 "% B $end
$var wire 1 ?# Cin $end
$var wire 1 #% Cout $end
$var wire 1 $% Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module SLT_MODULE $end
$var wire 32 %% A [31:0] $end
$var wire 32 &% B [31:0] $end
$var wire 1 '% Sel $end
$var wire 32 (% diff_out [31:0] $end
$var wire 1 )% carry_out $end
$var reg 32 *% Result [31:0] $end
$scope module SUB $end
$var wire 32 +% A [31:0] $end
$var wire 32 ,% B [31:0] $end
$var wire 32 -% B_mod [31:0] $end
$var wire 1 .% Sel $end
$var wire 32 /% carry [31:0] $end
$var wire 32 0% Result [31:0] $end
$var wire 1 )% Cout $end
$scope begin adder_32[1] $end
$scope module FA $end
$var wire 1 1% A $end
$var wire 1 2% B $end
$var wire 1 3% Cin $end
$var wire 1 4% Cout $end
$var wire 1 5% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[2] $end
$scope module FA $end
$var wire 1 6% A $end
$var wire 1 7% B $end
$var wire 1 8% Cin $end
$var wire 1 9% Cout $end
$var wire 1 :% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[3] $end
$scope module FA $end
$var wire 1 ;% A $end
$var wire 1 <% B $end
$var wire 1 =% Cin $end
$var wire 1 >% Cout $end
$var wire 1 ?% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[4] $end
$scope module FA $end
$var wire 1 @% A $end
$var wire 1 A% B $end
$var wire 1 B% Cin $end
$var wire 1 C% Cout $end
$var wire 1 D% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[5] $end
$scope module FA $end
$var wire 1 E% A $end
$var wire 1 F% B $end
$var wire 1 G% Cin $end
$var wire 1 H% Cout $end
$var wire 1 I% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[6] $end
$scope module FA $end
$var wire 1 J% A $end
$var wire 1 K% B $end
$var wire 1 L% Cin $end
$var wire 1 M% Cout $end
$var wire 1 N% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[7] $end
$scope module FA $end
$var wire 1 O% A $end
$var wire 1 P% B $end
$var wire 1 Q% Cin $end
$var wire 1 R% Cout $end
$var wire 1 S% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[8] $end
$scope module FA $end
$var wire 1 T% A $end
$var wire 1 U% B $end
$var wire 1 V% Cin $end
$var wire 1 W% Cout $end
$var wire 1 X% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[9] $end
$scope module FA $end
$var wire 1 Y% A $end
$var wire 1 Z% B $end
$var wire 1 [% Cin $end
$var wire 1 \% Cout $end
$var wire 1 ]% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[10] $end
$scope module FA $end
$var wire 1 ^% A $end
$var wire 1 _% B $end
$var wire 1 `% Cin $end
$var wire 1 a% Cout $end
$var wire 1 b% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[11] $end
$scope module FA $end
$var wire 1 c% A $end
$var wire 1 d% B $end
$var wire 1 e% Cin $end
$var wire 1 f% Cout $end
$var wire 1 g% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[12] $end
$scope module FA $end
$var wire 1 h% A $end
$var wire 1 i% B $end
$var wire 1 j% Cin $end
$var wire 1 k% Cout $end
$var wire 1 l% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[13] $end
$scope module FA $end
$var wire 1 m% A $end
$var wire 1 n% B $end
$var wire 1 o% Cin $end
$var wire 1 p% Cout $end
$var wire 1 q% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[14] $end
$scope module FA $end
$var wire 1 r% A $end
$var wire 1 s% B $end
$var wire 1 t% Cin $end
$var wire 1 u% Cout $end
$var wire 1 v% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[15] $end
$scope module FA $end
$var wire 1 w% A $end
$var wire 1 x% B $end
$var wire 1 y% Cin $end
$var wire 1 z% Cout $end
$var wire 1 {% Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[16] $end
$scope module FA $end
$var wire 1 |% A $end
$var wire 1 }% B $end
$var wire 1 ~% Cin $end
$var wire 1 !& Cout $end
$var wire 1 "& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[17] $end
$scope module FA $end
$var wire 1 #& A $end
$var wire 1 $& B $end
$var wire 1 %& Cin $end
$var wire 1 && Cout $end
$var wire 1 '& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[18] $end
$scope module FA $end
$var wire 1 (& A $end
$var wire 1 )& B $end
$var wire 1 *& Cin $end
$var wire 1 +& Cout $end
$var wire 1 ,& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[19] $end
$scope module FA $end
$var wire 1 -& A $end
$var wire 1 .& B $end
$var wire 1 /& Cin $end
$var wire 1 0& Cout $end
$var wire 1 1& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[20] $end
$scope module FA $end
$var wire 1 2& A $end
$var wire 1 3& B $end
$var wire 1 4& Cin $end
$var wire 1 5& Cout $end
$var wire 1 6& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[21] $end
$scope module FA $end
$var wire 1 7& A $end
$var wire 1 8& B $end
$var wire 1 9& Cin $end
$var wire 1 :& Cout $end
$var wire 1 ;& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[22] $end
$scope module FA $end
$var wire 1 <& A $end
$var wire 1 =& B $end
$var wire 1 >& Cin $end
$var wire 1 ?& Cout $end
$var wire 1 @& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[23] $end
$scope module FA $end
$var wire 1 A& A $end
$var wire 1 B& B $end
$var wire 1 C& Cin $end
$var wire 1 D& Cout $end
$var wire 1 E& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[24] $end
$scope module FA $end
$var wire 1 F& A $end
$var wire 1 G& B $end
$var wire 1 H& Cin $end
$var wire 1 I& Cout $end
$var wire 1 J& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[25] $end
$scope module FA $end
$var wire 1 K& A $end
$var wire 1 L& B $end
$var wire 1 M& Cin $end
$var wire 1 N& Cout $end
$var wire 1 O& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[26] $end
$scope module FA $end
$var wire 1 P& A $end
$var wire 1 Q& B $end
$var wire 1 R& Cin $end
$var wire 1 S& Cout $end
$var wire 1 T& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[27] $end
$scope module FA $end
$var wire 1 U& A $end
$var wire 1 V& B $end
$var wire 1 W& Cin $end
$var wire 1 X& Cout $end
$var wire 1 Y& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[28] $end
$scope module FA $end
$var wire 1 Z& A $end
$var wire 1 [& B $end
$var wire 1 \& Cin $end
$var wire 1 ]& Cout $end
$var wire 1 ^& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[29] $end
$scope module FA $end
$var wire 1 _& A $end
$var wire 1 `& B $end
$var wire 1 a& Cin $end
$var wire 1 b& Cout $end
$var wire 1 c& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[30] $end
$scope module FA $end
$var wire 1 d& A $end
$var wire 1 e& B $end
$var wire 1 f& Cin $end
$var wire 1 g& Cout $end
$var wire 1 h& Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[31] $end
$scope module FA $end
$var wire 1 i& A $end
$var wire 1 j& B $end
$var wire 1 k& Cin $end
$var wire 1 l& Cout $end
$var wire 1 m& Sum $end
$upscope $end
$upscope $end
$scope module FA0 $end
$var wire 1 n& A $end
$var wire 1 o& B $end
$var wire 1 .% Cin $end
$var wire 1 p& Cout $end
$var wire 1 q& Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module SRA $end
$var wire 32 r& data_in [31:0] $end
$var wire 5 s& shift_amt [4:0] $end
$var reg 32 t& data_out [31:0] $end
$upscope $end
$scope module SRL $end
$var wire 32 u& data_in [31:0] $end
$var wire 5 v& shift_amt [4:0] $end
$var reg 32 w& data_out [31:0] $end
$upscope $end
$upscope $end
$scope module Control_unit_instance $end
$var wire 7 x& opcode [6:0] $end
$var wire 32 y& inst [31:0] $end
$var wire 3 z& funct3 [2:0] $end
$var wire 1 8 BrLt $end
$var wire 1 9 BrEq $end
$var reg 4 {& ALU_sel [3:0] $end
$var reg 1 : Asel $end
$var reg 1 7 BrUn $end
$var reg 1 6 Bsel $end
$var reg 3 |& Imm_Sel [2:0] $end
$var reg 1 3 MemRW $end
$var reg 1 2 PCSel $end
$var reg 2 }& WBSel [1:0] $end
$var reg 3 ~& load_type [2:0] $end
$var reg 1 # regWEn $end
$upscope $end
$scope module DMEM_instance $end
$var wire 1 3 MemRW $end
$var wire 32 !' addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 "' dataR [31:0] $end
$var wire 32 #' dataW [31:0] $end
$upscope $end
$scope module IMEM_instance $end
$var wire 32 $' inst [31:0] $end
$var wire 5 %' inst_rsw [4:0] $end
$var wire 5 &' inst_rs2 [4:0] $end
$var wire 5 '' inst_rs1 [4:0] $end
$var wire 32 (' addr [31:0] $end
$upscope $end
$scope module Imm_Gen_instance $end
$var wire 3 )' Imm_Sel [2:0] $end
$var wire 32 *' inst [31:0] $end
$var reg 32 +' Imm_out [31:0] $end
$upscope $end
$scope module Load_encode_instance $end
$var wire 32 ,' load_data [31:0] $end
$var wire 3 -' load_type [2:0] $end
$var reg 32 .' load_result [31:0] $end
$upscope $end
$scope module PC_add4 $end
$var wire 32 /' B [31:0] $end
$var wire 32 0' B_mod [31:0] $end
$var wire 1 1' Sel $end
$var wire 32 2' carry [31:0] $end
$var wire 32 3' Result [31:0] $end
$var wire 1 4' Cout $end
$var wire 32 5' A [31:0] $end
$scope begin adder_32[1] $end
$scope module FA $end
$var wire 1 6' A $end
$var wire 1 7' B $end
$var wire 1 8' Cin $end
$var wire 1 9' Cout $end
$var wire 1 :' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[2] $end
$scope module FA $end
$var wire 1 ;' A $end
$var wire 1 <' B $end
$var wire 1 =' Cin $end
$var wire 1 >' Cout $end
$var wire 1 ?' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[3] $end
$scope module FA $end
$var wire 1 @' A $end
$var wire 1 A' B $end
$var wire 1 B' Cin $end
$var wire 1 C' Cout $end
$var wire 1 D' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[4] $end
$scope module FA $end
$var wire 1 E' A $end
$var wire 1 F' B $end
$var wire 1 G' Cin $end
$var wire 1 H' Cout $end
$var wire 1 I' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[5] $end
$scope module FA $end
$var wire 1 J' A $end
$var wire 1 K' B $end
$var wire 1 L' Cin $end
$var wire 1 M' Cout $end
$var wire 1 N' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[6] $end
$scope module FA $end
$var wire 1 O' A $end
$var wire 1 P' B $end
$var wire 1 Q' Cin $end
$var wire 1 R' Cout $end
$var wire 1 S' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[7] $end
$scope module FA $end
$var wire 1 T' A $end
$var wire 1 U' B $end
$var wire 1 V' Cin $end
$var wire 1 W' Cout $end
$var wire 1 X' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[8] $end
$scope module FA $end
$var wire 1 Y' A $end
$var wire 1 Z' B $end
$var wire 1 [' Cin $end
$var wire 1 \' Cout $end
$var wire 1 ]' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[9] $end
$scope module FA $end
$var wire 1 ^' A $end
$var wire 1 _' B $end
$var wire 1 `' Cin $end
$var wire 1 a' Cout $end
$var wire 1 b' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[10] $end
$scope module FA $end
$var wire 1 c' A $end
$var wire 1 d' B $end
$var wire 1 e' Cin $end
$var wire 1 f' Cout $end
$var wire 1 g' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[11] $end
$scope module FA $end
$var wire 1 h' A $end
$var wire 1 i' B $end
$var wire 1 j' Cin $end
$var wire 1 k' Cout $end
$var wire 1 l' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[12] $end
$scope module FA $end
$var wire 1 m' A $end
$var wire 1 n' B $end
$var wire 1 o' Cin $end
$var wire 1 p' Cout $end
$var wire 1 q' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[13] $end
$scope module FA $end
$var wire 1 r' A $end
$var wire 1 s' B $end
$var wire 1 t' Cin $end
$var wire 1 u' Cout $end
$var wire 1 v' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[14] $end
$scope module FA $end
$var wire 1 w' A $end
$var wire 1 x' B $end
$var wire 1 y' Cin $end
$var wire 1 z' Cout $end
$var wire 1 {' Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[15] $end
$scope module FA $end
$var wire 1 |' A $end
$var wire 1 }' B $end
$var wire 1 ~' Cin $end
$var wire 1 !( Cout $end
$var wire 1 "( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[16] $end
$scope module FA $end
$var wire 1 #( A $end
$var wire 1 $( B $end
$var wire 1 %( Cin $end
$var wire 1 &( Cout $end
$var wire 1 '( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[17] $end
$scope module FA $end
$var wire 1 (( A $end
$var wire 1 )( B $end
$var wire 1 *( Cin $end
$var wire 1 +( Cout $end
$var wire 1 ,( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[18] $end
$scope module FA $end
$var wire 1 -( A $end
$var wire 1 .( B $end
$var wire 1 /( Cin $end
$var wire 1 0( Cout $end
$var wire 1 1( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[19] $end
$scope module FA $end
$var wire 1 2( A $end
$var wire 1 3( B $end
$var wire 1 4( Cin $end
$var wire 1 5( Cout $end
$var wire 1 6( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[20] $end
$scope module FA $end
$var wire 1 7( A $end
$var wire 1 8( B $end
$var wire 1 9( Cin $end
$var wire 1 :( Cout $end
$var wire 1 ;( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[21] $end
$scope module FA $end
$var wire 1 <( A $end
$var wire 1 =( B $end
$var wire 1 >( Cin $end
$var wire 1 ?( Cout $end
$var wire 1 @( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[22] $end
$scope module FA $end
$var wire 1 A( A $end
$var wire 1 B( B $end
$var wire 1 C( Cin $end
$var wire 1 D( Cout $end
$var wire 1 E( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[23] $end
$scope module FA $end
$var wire 1 F( A $end
$var wire 1 G( B $end
$var wire 1 H( Cin $end
$var wire 1 I( Cout $end
$var wire 1 J( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[24] $end
$scope module FA $end
$var wire 1 K( A $end
$var wire 1 L( B $end
$var wire 1 M( Cin $end
$var wire 1 N( Cout $end
$var wire 1 O( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[25] $end
$scope module FA $end
$var wire 1 P( A $end
$var wire 1 Q( B $end
$var wire 1 R( Cin $end
$var wire 1 S( Cout $end
$var wire 1 T( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[26] $end
$scope module FA $end
$var wire 1 U( A $end
$var wire 1 V( B $end
$var wire 1 W( Cin $end
$var wire 1 X( Cout $end
$var wire 1 Y( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[27] $end
$scope module FA $end
$var wire 1 Z( A $end
$var wire 1 [( B $end
$var wire 1 \( Cin $end
$var wire 1 ]( Cout $end
$var wire 1 ^( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[28] $end
$scope module FA $end
$var wire 1 _( A $end
$var wire 1 `( B $end
$var wire 1 a( Cin $end
$var wire 1 b( Cout $end
$var wire 1 c( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[29] $end
$scope module FA $end
$var wire 1 d( A $end
$var wire 1 e( B $end
$var wire 1 f( Cin $end
$var wire 1 g( Cout $end
$var wire 1 h( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[30] $end
$scope module FA $end
$var wire 1 i( A $end
$var wire 1 j( B $end
$var wire 1 k( Cin $end
$var wire 1 l( Cout $end
$var wire 1 m( Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[31] $end
$scope module FA $end
$var wire 1 n( A $end
$var wire 1 o( B $end
$var wire 1 p( Cin $end
$var wire 1 q( Cout $end
$var wire 1 r( Sum $end
$upscope $end
$upscope $end
$scope module FA0 $end
$var wire 1 s( A $end
$var wire 1 t( B $end
$var wire 1 1' Cin $end
$var wire 1 u( Cout $end
$var wire 1 v( Sum $end
$upscope $end
$upscope $end
$scope module PC_instance $end
$var wire 1 ! clk $end
$var wire 32 w( data_in [31:0] $end
$var wire 1 " reset $end
$var reg 32 x( data_out [31:0] $end
$upscope $end
$scope module Writeback $end
$var wire 32 y( in0 [31:0] $end
$var wire 32 z( in1 [31:0] $end
$var wire 32 {( in2 [31:0] $end
$var wire 32 |( in3 [31:0] $end
$var wire 2 }( sel [1:0] $end
$var reg 32 ~( out [31:0] $end
$upscope $end
$scope module brc_instance $end
$var wire 1 7 BrUn $end
$var wire 32 !) data_2 [31:0] $end
$var wire 32 ") data_1 [31:0] $end
$var wire 32 #) Diff [31:0] $end
$var wire 1 $) Cout $end
$var reg 1 9 BrEq $end
$var reg 1 8 BrLt $end
$scope module subtractor $end
$var wire 32 %) B_mod [31:0] $end
$var wire 1 &) Sel $end
$var wire 32 ') carry [31:0] $end
$var wire 32 () Result [31:0] $end
$var wire 1 $) Cout $end
$var wire 32 )) B [31:0] $end
$var wire 32 *) A [31:0] $end
$scope begin adder_32[1] $end
$scope module FA $end
$var wire 1 +) A $end
$var wire 1 ,) B $end
$var wire 1 -) Cin $end
$var wire 1 .) Cout $end
$var wire 1 /) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[2] $end
$scope module FA $end
$var wire 1 0) A $end
$var wire 1 1) B $end
$var wire 1 2) Cin $end
$var wire 1 3) Cout $end
$var wire 1 4) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[3] $end
$scope module FA $end
$var wire 1 5) A $end
$var wire 1 6) B $end
$var wire 1 7) Cin $end
$var wire 1 8) Cout $end
$var wire 1 9) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[4] $end
$scope module FA $end
$var wire 1 :) A $end
$var wire 1 ;) B $end
$var wire 1 <) Cin $end
$var wire 1 =) Cout $end
$var wire 1 >) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[5] $end
$scope module FA $end
$var wire 1 ?) A $end
$var wire 1 @) B $end
$var wire 1 A) Cin $end
$var wire 1 B) Cout $end
$var wire 1 C) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[6] $end
$scope module FA $end
$var wire 1 D) A $end
$var wire 1 E) B $end
$var wire 1 F) Cin $end
$var wire 1 G) Cout $end
$var wire 1 H) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[7] $end
$scope module FA $end
$var wire 1 I) A $end
$var wire 1 J) B $end
$var wire 1 K) Cin $end
$var wire 1 L) Cout $end
$var wire 1 M) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[8] $end
$scope module FA $end
$var wire 1 N) A $end
$var wire 1 O) B $end
$var wire 1 P) Cin $end
$var wire 1 Q) Cout $end
$var wire 1 R) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[9] $end
$scope module FA $end
$var wire 1 S) A $end
$var wire 1 T) B $end
$var wire 1 U) Cin $end
$var wire 1 V) Cout $end
$var wire 1 W) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[10] $end
$scope module FA $end
$var wire 1 X) A $end
$var wire 1 Y) B $end
$var wire 1 Z) Cin $end
$var wire 1 [) Cout $end
$var wire 1 \) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[11] $end
$scope module FA $end
$var wire 1 ]) A $end
$var wire 1 ^) B $end
$var wire 1 _) Cin $end
$var wire 1 `) Cout $end
$var wire 1 a) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[12] $end
$scope module FA $end
$var wire 1 b) A $end
$var wire 1 c) B $end
$var wire 1 d) Cin $end
$var wire 1 e) Cout $end
$var wire 1 f) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[13] $end
$scope module FA $end
$var wire 1 g) A $end
$var wire 1 h) B $end
$var wire 1 i) Cin $end
$var wire 1 j) Cout $end
$var wire 1 k) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[14] $end
$scope module FA $end
$var wire 1 l) A $end
$var wire 1 m) B $end
$var wire 1 n) Cin $end
$var wire 1 o) Cout $end
$var wire 1 p) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[15] $end
$scope module FA $end
$var wire 1 q) A $end
$var wire 1 r) B $end
$var wire 1 s) Cin $end
$var wire 1 t) Cout $end
$var wire 1 u) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[16] $end
$scope module FA $end
$var wire 1 v) A $end
$var wire 1 w) B $end
$var wire 1 x) Cin $end
$var wire 1 y) Cout $end
$var wire 1 z) Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[17] $end
$scope module FA $end
$var wire 1 {) A $end
$var wire 1 |) B $end
$var wire 1 }) Cin $end
$var wire 1 ~) Cout $end
$var wire 1 !* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[18] $end
$scope module FA $end
$var wire 1 "* A $end
$var wire 1 #* B $end
$var wire 1 $* Cin $end
$var wire 1 %* Cout $end
$var wire 1 &* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[19] $end
$scope module FA $end
$var wire 1 '* A $end
$var wire 1 (* B $end
$var wire 1 )* Cin $end
$var wire 1 ** Cout $end
$var wire 1 +* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[20] $end
$scope module FA $end
$var wire 1 ,* A $end
$var wire 1 -* B $end
$var wire 1 .* Cin $end
$var wire 1 /* Cout $end
$var wire 1 0* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[21] $end
$scope module FA $end
$var wire 1 1* A $end
$var wire 1 2* B $end
$var wire 1 3* Cin $end
$var wire 1 4* Cout $end
$var wire 1 5* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[22] $end
$scope module FA $end
$var wire 1 6* A $end
$var wire 1 7* B $end
$var wire 1 8* Cin $end
$var wire 1 9* Cout $end
$var wire 1 :* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[23] $end
$scope module FA $end
$var wire 1 ;* A $end
$var wire 1 <* B $end
$var wire 1 =* Cin $end
$var wire 1 >* Cout $end
$var wire 1 ?* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[24] $end
$scope module FA $end
$var wire 1 @* A $end
$var wire 1 A* B $end
$var wire 1 B* Cin $end
$var wire 1 C* Cout $end
$var wire 1 D* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[25] $end
$scope module FA $end
$var wire 1 E* A $end
$var wire 1 F* B $end
$var wire 1 G* Cin $end
$var wire 1 H* Cout $end
$var wire 1 I* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[26] $end
$scope module FA $end
$var wire 1 J* A $end
$var wire 1 K* B $end
$var wire 1 L* Cin $end
$var wire 1 M* Cout $end
$var wire 1 N* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[27] $end
$scope module FA $end
$var wire 1 O* A $end
$var wire 1 P* B $end
$var wire 1 Q* Cin $end
$var wire 1 R* Cout $end
$var wire 1 S* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[28] $end
$scope module FA $end
$var wire 1 T* A $end
$var wire 1 U* B $end
$var wire 1 V* Cin $end
$var wire 1 W* Cout $end
$var wire 1 X* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[29] $end
$scope module FA $end
$var wire 1 Y* A $end
$var wire 1 Z* B $end
$var wire 1 [* Cin $end
$var wire 1 \* Cout $end
$var wire 1 ]* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[30] $end
$scope module FA $end
$var wire 1 ^* A $end
$var wire 1 _* B $end
$var wire 1 `* Cin $end
$var wire 1 a* Cout $end
$var wire 1 b* Sum $end
$upscope $end
$upscope $end
$scope begin adder_32[31] $end
$scope module FA $end
$var wire 1 c* A $end
$var wire 1 d* B $end
$var wire 1 e* Cin $end
$var wire 1 f* Cout $end
$var wire 1 g* Sum $end
$upscope $end
$upscope $end
$scope module FA0 $end
$var wire 1 h* A $end
$var wire 1 i* B $end
$var wire 1 &) Cin $end
$var wire 1 j* Cout $end
$var wire 1 k* Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module regfile_instance $end
$var wire 1 ! clk $end
$var wire 32 l* data_W [31:0] $end
$var wire 1 # regWEn $end
$var wire 1 " reset $end
$var wire 5 m* rs1 [4:0] $end
$var wire 5 n* rs2 [4:0] $end
$var wire 5 o* rsW [4:0] $end
$var wire 32 p* data_2 [31:0] $end
$var wire 32 q* data_1 [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 r* i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 r*
bx q*
bx p*
bx o*
bx n*
bx m*
b0 l*
xk*
xj*
xi*
xh*
xg*
xf*
xe*
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
xO*
xN*
xM*
xL*
xK*
xJ*
xI*
xH*
xG*
xF*
xE*
xD*
xC*
xB*
xA*
x@*
x?*
x>*
x=*
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
xV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xC)
xB)
xA)
x@)
x?)
x>)
x=)
x<)
x;)
x:)
x9)
x8)
x7)
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
bx *)
bx ))
bx ()
bx ')
1&)
bx %)
x$)
bx #)
bx ")
bx !)
b0 ~(
bx }(
b0 |(
b100 {(
b0 z(
bx y(
b0 x(
b0x00 w(
0v(
0u(
0t(
0s(
0r(
0q(
0p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
1?'
0>'
0='
1<'
0;'
0:'
09'
08'
07'
06'
b0 5'
04'
b100 3'
b0 2'
01'
b100 0'
b100 /'
bx .'
bx -'
bx ,'
bx +'
bx *'
bx )'
b0 ('
bx ''
bx &'
bx %'
bx $'
bx #'
bx "'
b0 !'
bx ~&
bx }&
bx |&
bx {&
bx z&
bx y&
bx x&
bx w&
bx v&
bx u&
bx t&
bx s&
bx r&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
bx 0%
bx /%
1.%
bx -%
bx ,%
bx +%
b0x *%
x)%
bx (%
0'%
bx &%
bx %%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
bx A#
bx @#
1?#
bx >#
bx =#
bx <#
b1111111111111111111111111111111x ;#
x:#
bx 9#
18#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
bx O
xN
bx M
bx L
xK
bx J
bx I
b0 H
bx G
bx F
bx E
b0x D
b1111111111111111111111111111111x C
bx B
bx A
bx @
bx ?
bx >
bx =
b0 <
bx ;
x:
x9
x8
x7
x6
bx 5
bx 4
x3
x2
b100 1
b0x00 0
b0 /
bx .
b0 -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
x#
1"
1!
$end
#3
0"
#5
0!
#10
b0xx00 0
b0xx00 w(
xD'
xB'
b0xx00 1
b0xx00 3'
b0xx00 {(
x?'
b0x00 2'
x>'
x;'
b0x00 /
b0x00 ('
b0x00 5'
b0x00 x(
1!
#15
0!
#20
b0xxx00 0
b0xxx00 w(
b0xxx00 1
b0xxx00 3'
b0xxx00 {(
xI'
xG'
b0xx00 2'
xC'
x@'
b0xx00 /
b0xx00 ('
b0xx00 5'
b0xx00 x(
1!
#25
0!
#30
b0xxxx00 0
b0xxxx00 w(
b0xxxx00 1
b0xxxx00 3'
b0xxxx00 {(
xN'
xL'
b0xxx00 2'
xH'
xE'
b0xxx00 /
b0xxx00 ('
b0xxx00 5'
b0xxx00 x(
1!
#35
0!
#40
b0xxxxx00 0
b0xxxxx00 w(
b0xxxxx00 1
b0xxxxx00 3'
b0xxxxx00 {(
xS'
xQ'
b0xxxx00 2'
xM'
xJ'
b0xxxx00 /
b0xxxx00 ('
b0xxxx00 5'
b0xxxx00 x(
1!
#45
0!
#50
b0xxxxxx00 0
b0xxxxxx00 w(
b0xxxxxx00 1
b0xxxxxx00 3'
b0xxxxxx00 {(
xX'
xV'
b0xxxxx00 2'
xR'
xO'
b0xxxxx00 /
b0xxxxx00 ('
b0xxxxx00 5'
b0xxxxx00 x(
1!
#53
